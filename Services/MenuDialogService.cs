using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using InterviewChatbot.Models;
using Microsoft.Bot.Builder;
using Microsoft.Bot.Schema;
using Microsoft.Extensions.Logging;

namespace InterviewChatbot.Services
{
    public class MenuDialogService
    {
        private readonly OpenAIService _openAIService;
        private readonly LoggingService _loggingService;
        private readonly ILogger<MenuDialogService> _logger;
        private readonly UserProfileEvaluationService _evaluationService;
        private readonly AdaptiveQuestionsService _adaptiveQuestionsService;

        public MenuDialogService(
            OpenAIService openAIService, 
            LoggingService loggingService, 
            ILogger<MenuDialogService> logger,
            UserProfileEvaluationService evaluationService,
            AdaptiveQuestionsService adaptiveQuestionsService)
        {
            _openAIService = openAIService;
            _loggingService = loggingService;
            _logger = logger;
            _evaluationService = evaluationService;
            _adaptiveQuestionsService = adaptiveQuestionsService;
        }

        /// <summary>
        /// Traite le message de l'utilisateur en fonction de l'√©tat actuel de l'interaction
        /// </summary>
        public async Task<Activity> ProcessUserMessageAsync(ITurnContext turnContext, string userMessage, UserProfile userProfile)
        {
            // Si l'utilisateur est en mode √©valuation
            if (userProfile.CurrentState == "evaluation")
            {
                return await _evaluationService.ProcessEvaluationStepAsync(turnContext, userProfile, userMessage);
            }
            
            // Autres traitements bas√©s sur l'√©tat...
            
            // Par d√©faut, retourne le menu principal
            return InteractiveElements.CreateMainMenu();
        }

        /// <summary>
        /// Traite la s√©lection dans le menu principal
        /// </summary>
        public async Task<(string Message, Activity Options)> ProcessMainMenuSelection(string selection, InterviewSession session)
        {
            switch (selection)
            {
                case "üë§ √âvaluer mon profil":
                    session.UserProfile.CurrentState = "evaluation";
                    _loggingService.LogStageTransition(session.UserProfile.UserId, "MenuPrincipal", "√âvaluation");
                    
                    // On utilise ITurnContext.Activity.GetConversationReference() pour obtenir la r√©f√©rence de conversation
                    // Pour cette impl√©mentation, nous devons passer par une m√©thode asynchrone s√©par√©e
                    var message = await StartProfileEvaluationAsync(session.UserProfile);
                    return (message.Text, null); // Retourne le message sans options suppl√©mentaires
                
                case "üìã Commencer la pr√©paration":
                    // Adapter la pr√©paration en fonction du profil de vuln√©rabilit√© si √©valu√©
                    if (session.UserProfile.IsProfileEvaluated)
                    {
                        string adaptedMessage = "Pr√©parons-nous pour votre entretien ! ";
                        
                        // Adapter le message en fonction du niveau d'anxi√©t√©
                        if (session.UserProfile.AnxietyLevel == "√©lev√©")
                        {
                            adaptedMessage += "Ne vous inqui√©tez pas, nous allons proc√©der √©tape par √©tape, √† votre rythme. ";
                        }
                        
                        // Adapter le message en fonction du niveau d'exp√©rience
                        if (session.UserProfile.ExperienceLevel == "d√©butant")
                        {
                            adaptedMessage += "Nous commencerons par les bases pour vous mettre en confiance. ";
                        }
                        
                        adaptedMessage += "Voici quelques options pour vous aider :";
                        
                        session.CurrentStage = InterviewStage.Preparation;
                        _loggingService.LogStageTransition(session.UserProfile.UserId, "MenuPrincipal", "Preparation");
                        return (adaptedMessage, InteractiveElements.CreatePreparationMenu());
                    }
                    else
                    {
                        session.CurrentStage = InterviewStage.Preparation;
                        _loggingService.LogStageTransition(session.UserProfile.UserId, "MenuPrincipal", "Preparation");
                        return ("Pr√©parons-nous pour votre entretien ! Voici quelques options pour vous aider :", 
                                InteractiveElements.CreatePreparationMenu());
                    }

                case "üí¨ Simuler un entretien":
                    // Adapter la simulation en fonction du profil de vuln√©rabilit√© si √©valu√©
                    if (session.UserProfile.IsProfileEvaluated)
                    {
                        string adaptedMessage = "C'est parti pour une simulation d'entretien ! ";
                        
                        // Adapter en fonction de la pr√©f√©rence d'apprentissage
                        if (session.UserProfile.LearningPreference == "progressif")
                        {
                            adaptedMessage += "Je vous propose de commencer par une simulation progressive avec des questions de difficult√© croissante. ";
                        }
                        else if (session.UserProfile.LearningPreference == "r√©aliste")
                        {
                            adaptedMessage += "Nous allons faire une simulation aussi r√©aliste que possible, pour vous pr√©parer aux conditions r√©elles. ";
                        }
                        
                        adaptedMessage += "Quel type de simulation souhaitez-vous ?";
                        
                        session.CurrentStage = InterviewStage.Simulation;
                        _loggingService.LogStageTransition(session.UserProfile.UserId, "MenuPrincipal", "Simulation");
                        return (adaptedMessage, InteractiveElements.CreateSimulationMenu());
                    }
                    else
                    {
                        session.CurrentStage = InterviewStage.Simulation;
                        _loggingService.LogStageTransition(session.UserProfile.UserId, "MenuPrincipal", "Simulation");
                        return ("C'est parti pour une simulation d'entretien ! Quel type de simulation souhaitez-vous ?", 
                                InteractiveElements.CreateSimulationMenu());
                    }

                case "üìä Voir mon feedback":
                    session.CurrentStage = InterviewStage.Feedback;
                    _loggingService.LogStageTransition(session.UserProfile.UserId, "MenuPrincipal", "Feedback");
                    
                    // G√©n√©ration de feedback si l'historique est suffisant
                    if (session.Feedback.Count > 0 || session.ConversationHistory.Count > 5)
                    {
                        string feedback = await GenerateFeedbackSummary(session);
                        return (feedback, CreateFeedbackOptions());
                    }
                    else
                    {
                        return ("Vous n'avez pas encore assez d'historique pour un feedback d√©taill√©. Essayez d'abord une simulation d'entretien !", 
                                InteractiveElements.CreateMainMenu());
                    }

                case "‚ùì Conseils g√©n√©raux":
                    return (await GetGeneralAdvice(session.UserProfile), 
                            InteractiveElements.CreateMainMenu());

                case "‚öôÔ∏è Mettre √† jour mon profil":
                    return ("Mettons √† jour votre profil. Qu'aimeriez-vous modifier ?", 
                            CreateProfileUpdateOptions());

                default:
                    return ("Je n'ai pas compris votre s√©lection. Voici le menu principal :", 
                            InteractiveElements.CreateMainMenu());
            }
        }

        /// <summary>
        /// Traite la s√©lection dans le menu de pr√©paration
        /// </summary>
        public async Task<(string Message, Activity Options)> ProcessPreparationMenuSelection(string selection, InterviewSession session)
        {
            switch (selection)
            {
                case "üîç Rechercher l'entreprise":
                    string prompt = "Tu es un conseiller qui explique comment bien rechercher une entreprise avant un entretien. " +
                                    "Donne des conseils pratiques sur les aspects √† rechercher et o√π trouver ces informations.";
                    
                    var messages = new List<MessageDto>
                    {
                        new MessageDto { Role = "user", Content = "Comment rechercher efficacement des informations sur une entreprise avant un entretien ?" }
                    };
                    
                    string response = await _openAIService.GetInterviewResponse(messages, prompt);
                    return (response, CreateResearchFollowUpOptions());

                case "üó£Ô∏è Questions fr√©quentes":
                    return (await GetFrequentlyAskedQuestions(session.UserProfile.JobSector), 
                            CreateFAQFollowUpOptions());

                case "üëî Conseils de pr√©sentation":
                    string presentationPrompt = "Tu es un conseiller en image professionnelle qui explique comment se pr√©senter " +
                                               "pour un entretien d'embauche (tenue vestimentaire, langage corporel, etc.). " +
                                               "Donne des conseils adapt√©s au secteur suivant : " + session.UserProfile.JobSector;
                    
                    var presentationMessages = new List<MessageDto>
                    {
                        new MessageDto { Role = "user", Content = "Comment me pr√©senter lors d'un entretien d'embauche ?" }
                    };
                    
                    string presentationResponse = await _openAIService.GetInterviewResponse(presentationMessages, presentationPrompt);
                    return (presentationResponse, InteractiveElements.CreatePreparationMenu());

                case "üìù Pr√©parer mes r√©ponses":
                    return ("Pr√©parons vos r√©ponses aux questions typiques. Quel type de question souhaitez-vous pr√©parer ?", 
                            CreateQuestionTypeOptions());

                case "üè† Retour au menu principal":
                    return ("Voici le menu principal :", 
                            InteractiveElements.CreateMainMenu());

                default:
                    return ("Je n'ai pas compris votre s√©lection. Voici les options de pr√©paration :", 
                            InteractiveElements.CreatePreparationMenu());
            }
        }

        /// <summary>
        /// Traite la s√©lection dans le menu de simulation
        /// </summary>
        public async Task<(string Message, Activity Options)> ProcessSimulationMenuSelection(string selection, InterviewSession session)
        {
            switch (selection)
            {
                case "üöÄ D√©marrer la simulation":
                    string simulationIntro = "Je vais maintenant jouer le r√¥le d'un recruteur pour une simulation d'entretien. " +
                                            "Je vais vous poser des questions et vous donner un feedback sur vos r√©ponses. " +
                                            "Commen√ßons !";
                    
                    session.ConversationHistory.Add(new MessageDto { Role = "assistant", Content = simulationIntro });
                    
                    // Utiliser le service de questions adaptatives pour g√©n√©rer la premi√®re question
                    var firstQuestionObj = await _adaptiveQuestionsService.GetAdaptedQuestionAsync(session.UserProfile, "introduction");
                    string firstQuestion = firstQuestionObj.QuestionText;
                    
                    // Stocker le conseil dans les m√©tadonn√©es de la session pour l'utiliser lors du feedback
                    session.Feedback["derni√®re_question_conseil"] = firstQuestionObj.TipsForAnswer;
                    
                    session.ConversationHistory.Add(new MessageDto { Role = "assistant", Content = firstQuestion });
                    
                    return (simulationIntro + "\n\n" + firstQuestion, 
                            InteractiveElements.CreateSimulationResponseOptions());

                case "‚è±Ô∏è Simulation courte (5-10 min)":
                    session.ConversationHistory.Add(new MessageDto { 
                        Role = "system", 
                        Content = "Configuration: simulation courte, 3-5 questions, niveau adapt√©: " + session.UserProfile.LanguageLevel 
                    });
                    
                    // Pr√©parer une s√©quence de questions adapt√©es
                    var shortSimulationQuestions = await _adaptiveQuestionsService.GenerateAdaptedInterviewSequenceAsync(session.UserProfile, 3);
                    
                    // Stocker les questions dans la session pour y acc√©der plus tard
                    session.Feedback["questions_pr√©par√©es"] = string.Join("|", shortSimulationQuestions.Select(q => q.Id));
                    
                    // Stocker √©galement les questions dans un format accessible
                    foreach (var question in shortSimulationQuestions)
                    {
                        session.Feedback[$"question_{question.Id}"] = question.QuestionText;
                        session.Feedback[$"conseil_{question.Id}"] = question.TipsForAnswer;
                    }
                    
                    return ("Parfait, nous allons faire une simulation courte de 3 questions adapt√©es √† votre profil. Pr√™t √† commencer ?", 
                            CreateReadyOptions());

                case "‚è≥ Simulation compl√®te (15-20 min)":
                    session.ConversationHistory.Add(new MessageDto { 
                        Role = "system", 
                        Content = "Configuration: simulation compl√®te, 8-10 questions, niveau adapt√©: " + session.UserProfile.LanguageLevel 
                    });
                    
                    // Pr√©parer une s√©quence plus longue de questions adapt√©es
                    var fullSimulationQuestions = await _adaptiveQuestionsService.GenerateAdaptedInterviewSequenceAsync(session.UserProfile, 8);
                    
                    // Stocker les questions dans la session pour y acc√©der plus tard
                    session.Feedback["questions_pr√©par√©es"] = string.Join("|", fullSimulationQuestions.Select(q => q.Id));
                    
                    // Stocker √©galement les questions dans un format accessible
                    foreach (var question in fullSimulationQuestions)
                    {
                        session.Feedback[$"question_{question.Id}"] = question.QuestionText;
                        session.Feedback[$"conseil_{question.Id}"] = question.TipsForAnswer;
                    }
                    
                    return ("Nous allons faire une simulation compl√®te de 8 questions adapt√©es √† votre profil. Prenez votre temps pour r√©pondre. Pr√™t √† commencer ?", 
                            CreateReadyOptions());

                case "üéÆ Simulation par th√®me":
                    return ("Quel aspect sp√©cifique de l'entretien souhaitez-vous simuler ?", 
                            CreateSimulationThemeOptions());

                case "üè† Retour au menu principal":
                    return ("Voici le menu principal :", 
                            InteractiveElements.CreateMainMenu());

                default:
                    return ("Je n'ai pas compris votre s√©lection. Voici les options de simulation :", 
                            InteractiveElements.CreateSimulationMenu());
            }
        }

        /// <summary>
        /// Obtient les questions fr√©quemment pos√©es pour un secteur donn√©
        /// </summary>
        private async Task<string> GetFrequentlyAskedQuestions(string jobSector)
        {
            string prompt = $"Tu es un coach sp√©cialis√© dans la pr√©paration aux entretiens d'embauche. " +
                           $"Liste les 5 questions les plus fr√©quemment pos√©es lors d'un entretien d'embauche " +
                           $"dans le secteur {jobSector}. Pour chaque question, donne un conseil sur la fa√ßon d'y r√©pondre efficacement.";
            
            var messages = new List<MessageDto>
            {
                new MessageDto { Role = "user", Content = $"Quelles sont les questions fr√©quentes en entretien dans le secteur {jobSector} ?" }
            };
            
            return await _openAIService.GetInterviewResponse(messages, prompt);
        }

        /// <summary>
        /// Obtient les conseils g√©n√©raux pour les entretiens
        /// </summary>
        private async Task<string> GetGeneralAdvice(UserProfile profile)
        {
            string prompt = "Tu es un coach d'entretien d'embauche qui donne des conseils g√©n√©raux pour r√©ussir un entretien. " +
                           $"Adapte tes conseils au niveau de comp√©tence de l'utilisateur (niveau de langue: {profile.LanguageLevel}, " +
                           $"niveau num√©rique: {profile.DigitalSkillLevel}). Sois concret et pratique.";
            
            var messages = new List<MessageDto>
            {
                new MessageDto { Role = "user", Content = "Donnez-moi des conseils g√©n√©raux pour r√©ussir un entretien d'embauche." }
            };
            
            return await _openAIService.GetInterviewResponse(messages, prompt);
        }

        /// <summary>
        /// G√©n√®re une question pour la simulation d'entretien
        /// </summary>
        private async Task<string> GetSimulationQuestion(UserProfile profile, string questionType)
        {
            // Utiliser le service de questions adaptatives
            var questionObj = await _adaptiveQuestionsService.GetAdaptedQuestionAsync(profile, questionType);
            return questionObj.QuestionText;
            
            // Code original comment√© ci-dessous
            /*
            string prompt = $"Tu es un recruteur qui pose une question d'entretien de type '{questionType}' " +
                           $"√† un candidat dans le secteur {profile.JobSector} avec un niveau d'exp√©rience '{profile.Experience}'. " +
                           $"Pose uniquement la question, sans explication suppl√©mentaire.";
            
            var messages = new List<MessageDto>
            {
                new MessageDto { Role = "user", Content = $"Posez-moi une question d'entretien de type {questionType}." }
            };
            
            return await _openAIService.GetInterviewResponse(messages, prompt);
            */
        }

        /// <summary>
        /// G√©n√®re un r√©sum√© de feedback bas√© sur l'historique des conversations
        /// </summary>
        private async Task<string> GenerateFeedbackSummary(InterviewSession session)
        {
            // Si nous avons des feedbacks enregistr√©s, les utiliser
            if (session.Feedback.Count > 0)
            {
                string feedbackSummary = "Voici un r√©sum√© de vos performances :\n\n";
                
                // Extraire les conseils li√©s aux questions adapt√©es
                var questionConseils = new Dictionary<string, string>();
                
                foreach (var feedback in session.Feedback)
                {
                    if (feedback.Key.StartsWith("conseil_"))
                    {
                        string questionId = feedback.Key.Substring(8); // Longueur de "conseil_"
                        if (session.Feedback.ContainsKey($"question_{questionId}"))
                        {
                            questionConseils[session.Feedback[$"question_{questionId}"]] = feedback.Value;
                        }
                    }
                }
                
                // Ajouter les feedbacks classiques
                foreach (var feedback in session.Feedback)
                {
                    // Ne pas afficher les m√©tadonn√©es techniques
                    if (!feedback.Key.StartsWith("question_") && 
                        !feedback.Key.StartsWith("conseil_") && 
                        !feedback.Key.Equals("questions_pr√©par√©es"))
                    {
                        feedbackSummary += $"‚Ä¢ {feedback.Key} : {feedback.Value}\n";
                    }
                }
                
                // Ajouter les conseils li√©s aux questions si disponibles
                if (questionConseils.Count > 0)
                {
                    feedbackSummary += "\nConseils pour am√©liorer vos r√©ponses :\n\n";
                    
                    foreach (var conseil in questionConseils)
                    {
                        feedbackSummary += $"‚Ä¢ Pour la question \"{conseil.Key}\" : {conseil.Value}\n\n";
                    }
                }
                
                return feedbackSummary;
            }
            // Sinon, g√©n√©rer un feedback bas√© sur l'historique des conversations
            else
            {
                // Enrichir le prompt avec le profil de vuln√©rabilit√© de l'utilisateur
                string promptContexte = "";
                
                if (session.UserProfile.IsProfileEvaluated)
                {
                    promptContexte = $@"
Profil de vuln√©rabilit√© du candidat:
- Niveau d'exp√©rience en entretien: {session.UserProfile.ExperienceLevel}
- Niveau d'anxi√©t√©: {session.UserProfile.AnxietyLevel}
- Format d'apprentissage pr√©f√©r√©: {session.UserProfile.LearningPreference}
- Besoins sp√©cifiques: {session.UserProfile.SpecificNeeds}

Adapte ton feedback en fonction de ce profil. Sois particuli√®rement bienveillant si le niveau d'anxi√©t√© est √©lev√©,
et donne des conseils structur√©s et progressifs si le format d'apprentissage pr√©f√©r√© est 'progressif'.";
                }
                
                string prompt = $@"Tu es un coach d'entretien qui analyse les performances d'un candidat en entretien.
Analyse l'historique de conversation ci-dessous et fournis un feedback constructif,
en soulignant les points forts et les points √† am√©liorer. Sois bienveillant et encourageant.
{promptContexte}

Structure ton feedback en 3 parties:
1. Points forts observ√©s
2. Axes d'am√©lioration
3. Conseils personnalis√©s pour progresser";
                
                // Prendre les derniers √©changes (max 10) pour l'analyse
                var relevantHistory = session.ConversationHistory.Count <= 10 
                    ? session.ConversationHistory 
                    : session.ConversationHistory.GetRange(session.ConversationHistory.Count - 10, 10);
                
                var messages = new List<MessageDto>(relevantHistory)
                {
                    new MessageDto { Role = "user", Content = "Pouvez-vous me donner un feedback sur mes r√©ponses en entretien ?" }
                };
                
                return await _openAIService.GetInterviewResponse(messages, prompt);
            }
        }

        /// <summary>
        /// Cr√©e les options pour le suivi apr√®s recherche d'entreprise
        /// </summary>
        private Activity CreateResearchFollowUpOptions()
        {
            var options = new List<string>
            {
                "üåê Sites √† consulter",
                "üìä Donn√©es √† rechercher",
                "üìù Prendre des notes",
                "üîô Retour pr√©paration",
                "üè† Menu principal"
            };
            
            return InteractiveElements.CreateButtonMessage("Que voulez-vous faire ensuite ?", options);
        }

        /// <summary>
        /// Cr√©e les options pour le suivi des questions fr√©quentes
        /// </summary>
        private Activity CreateFAQFollowUpOptions()
        {
            var options = new List<string>
            {
                "üíº Questions sur l'exp√©rience",
                "üîß Questions techniques",
                "üß† Questions comportementales",
                "üîô Retour pr√©paration",
                "üè† Menu principal"
            };
            
            return InteractiveElements.CreateButtonMessage("Quels types de questions vous int√©ressent ?", options);
        }

        /// <summary>
        /// Cr√©e les options pour les types de questions √† pr√©parer
        /// </summary>
        private Activity CreateQuestionTypeOptions()
        {
            var options = new List<string>
            {
                "üëã Se pr√©senter",
                "üíº Parcours professionnel",
                "üí™ Forces et faiblesses",
                "üîÆ Projets futurs",
                "üè† Menu principal"
            };
            
            return InteractiveElements.CreateButtonMessage("Sur quel sujet voulez-vous pr√©parer vos r√©ponses ?", options);
        }

        /// <summary>
        /// Cr√©e les options pour la mise √† jour du profil
        /// </summary>
        private Activity CreateProfileUpdateOptions()
        {
            var options = new List<string>
            {
                "üè¢ Secteur d'activit√©",
                "üìä Niveau d'exp√©rience",
                "üó£Ô∏è Niveau de langue",
                "üíª Comp√©tences num√©riques",
                "üè† Menu principal"
            };
            
            return InteractiveElements.CreateButtonMessage("Que souhaitez-vous mettre √† jour dans votre profil ?", options);
        }

        /// <summary>
        /// Cr√©e les options de pr√™t √† commencer
        /// </summary>
        private Activity CreateReadyOptions()
        {
            var options = new List<string>
            {
                "‚úÖ Je suis pr√™t",
                "‚è±Ô∏è Donnez-moi une minute",
                "‚ùì Quelques conseils avant",
                "üè† Menu principal"
            };
            
            return InteractiveElements.CreateButtonMessage("√ätes-vous pr√™t √† commencer ?", options);
        }

        /// <summary>
        /// Cr√©e les options pour les th√®mes de simulation
        /// </summary>
        private Activity CreateSimulationThemeOptions()
        {
            var options = new List<string>
            {
                "ü§ù D√©but d'entretien",
                "üí∞ N√©gociation salariale",
                "‚ùì Questions difficiles",
                "üß† Questions pi√®ges",
                "üè† Menu principal"
            };
            
            return InteractiveElements.CreateButtonMessage("Quel aspect sp√©cifique voulez-vous simuler ?", options);
        }

        /// <summary>
        /// Cr√©e les options apr√®s feedback
        /// </summary>
        private Activity CreateFeedbackOptions()
        {
            var options = new List<string>
            {
                "üìä Feedback d√©taill√©",
                "üìù Conseils d'am√©lioration",
                "üîÑ Nouvelle simulation",
                "üè† Menu principal"
            };
            
            return InteractiveElements.CreateButtonMessage("Que souhaitez-vous faire avec ce feedback ?", options);
        }

        /// <summary>
        /// D√©marre l'√©valuation du profil utilisateur
        /// </summary>
        private async Task<Activity> StartProfileEvaluationAsync(UserProfile userProfile)
        {
            // Note: Dans une impl√©mentation r√©elle avec le SDK Bot Framework,
            // nous aurions besoin d'un ITurnContext valide. Cette m√©thode est 
            // une simplification pour notre d√©mo.
            try 
            {
                // Nous passons null pour le TurnContext - ce n'est pas id√©al mais 
                // notre service d'√©valuation peut fonctionner sans un TurnContext complet
                // pour cette d√©monstration
                return await _evaluationService.StartEvaluationAsync(null, userProfile);
            }
            catch (Exception ex)
            {
                _logger.LogError($"Erreur lors du d√©marrage de l'√©valuation: {ex.Message}");
                return MessageFactory.Text("D√©sol√©, une erreur s'est produite lors de l'√©valuation du profil. Veuillez r√©essayer.");
            }
        }
    }
} 