using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.Bot.Builder;
using Microsoft.Bot.Schema;
using InterviewChatbot.Models;
using System.Linq;

namespace InterviewChatbot.Services
{
    public class UserProfileEvaluationService
    {
        private readonly OpenAIService _openAIService;
        private readonly LoggingService _loggingService;
        
        // Questions d'√©valuation des vuln√©rabilit√©s
        private readonly List<string> _evaluationQuestions = new List<string>
        {
            "Pour commencer, quel est ton niveau de familiarit√© avec les entretiens d'embauche ? Est-ce une exp√©rience nouvelle pour toi ou en as-tu d√©j√† pass√© ?",
            "Y a-t-il des aspects sp√©cifiques des entretiens qui t'inqui√®tent le plus en ce moment ? (Par exemple : parler de toi, r√©pondre √† des questions difficiles, g√©rer le stress ?)",
            "As-tu d√©j√† rencontr√© des obstacles ou des difficult√©s particuli√®res lors de tes recherches d'emploi ou d'entretiens pr√©c√©dents ?",
            "Te sens-tu √† l'aise pour parler de tes exp√©riences professionnelles ou de ton parcours jusqu'√† pr√©sent ? Y a-t-il des p√©riodes que tu pr√©f√©rerais aborder avec prudence ?",
            "Y a-t-il des am√©nagements ou des besoins sp√©cifiques dont tu aimerais que nous tenions compte pour rendre cette pr√©paration efficace pour toi ?",
            "Comment te sens-tu g√©n√©ralement face √† l'id√©e de te \"vendre\" ou de mettre en avant tes comp√©tences et qualit√©s ?",
            "As-tu des appr√©hensions concernant les questions sur d'√©ventuelles \"lacunes\" dans ton parcours (p√©riodes sans emploi, changements fr√©quents) ?",
            "Pr√©f√®res-tu t'entra√Æner sur des situations tr√®s concr√®tes et r√©alistes, ou plut√¥t des sc√©narios progressifs et plus simples au d√©but ?"
        };

        public UserProfileEvaluationService(OpenAIService openAIService, LoggingService loggingService)
        {
            _openAIService = openAIService;
            _loggingService = loggingService;
        }

        public async Task<Activity> StartEvaluationAsync(ITurnContext turnContext, UserProfile userProfile)
        {
            _loggingService.LogStageTransition(userProfile.UserId, "Menu Principal", "√âvaluation");
            
            // Enregistrer que nous sommes en mode √©valuation
            userProfile.CurrentState = "evaluation";
            userProfile.EvaluationStep = 0;
            userProfile.VulnerabilityProfile = new Dictionary<string, string>();
            
            // Message d'introduction
            string introMessage = "Bienvenue dans l'√©valuation de profil ! Je vais te poser quelques questions pour mieux comprendre tes besoins et adapter nos sessions d'entra√Ænement. Tu peux r√©pondre simplement et honn√™tement. Pr√™t √† commencer ?";
            
            // Cr√©er des boutons pour commencer ou sauter l'√©valuation
            var reply = MessageFactory.Text(introMessage);
            reply.SuggestedActions = new SuggestedActions
            {
                Actions = new List<CardAction>
                {
                    new CardAction { Title = "‚úÖ Commencer l'√©valuation", Type = ActionTypes.ImBack, Value = "Commencer l'√©valuation" },
                    new CardAction { Title = "‚è© Passer cette √©tape", Type = ActionTypes.ImBack, Value = "Passer l'√©valuation" }
                }
            };

            return reply;
        }

        public async Task<Activity> ProcessEvaluationStepAsync(ITurnContext turnContext, UserProfile userProfile, string userMessage)
        {
            if (userMessage.Contains("Passer l'√©valuation"))
            {
                return await CompleteEvaluationAsync(turnContext, userProfile);
            }

            // Si c'est le d√©but ou si l'utilisateur confirme le d√©marrage
            if (userProfile.EvaluationStep == 0 && (userMessage.Contains("Commencer") || userMessage.Contains("Pr√™t")))
            {
                userProfile.EvaluationStep = 1;
                return MessageFactory.Text(_evaluationQuestions[0]);
            }
            
            // Enregistrer la r√©ponse pr√©c√©dente
            if (userProfile.EvaluationStep > 0 && userProfile.EvaluationStep <= _evaluationQuestions.Count)
            {
                string questionKey = $"Question{userProfile.EvaluationStep}";
                userProfile.VulnerabilityProfile[questionKey] = userMessage;
                
                _loggingService.LogUserInteraction(userProfile.UserId, userMessage, "R√©ponse enregistr√©e", "√âvaluation");
            }
            
            // Passer √† la question suivante ou terminer
            userProfile.EvaluationStep++;
            
            if (userProfile.EvaluationStep <= _evaluationQuestions.Count)
            {
                return MessageFactory.Text(_evaluationQuestions[userProfile.EvaluationStep - 1]);
            }
            else
            {
                return await CompleteEvaluationAsync(turnContext, userProfile);
            }
        }

        private async Task<Activity> CompleteEvaluationAsync(ITurnContext turnContext, UserProfile userProfile)
        {
            // Analyser les r√©ponses pour cr√©er un profil de vuln√©rabilit√©
            await AnalyzeUserProfileAsync(userProfile);
            
            // Changer l'√©tat pour retourner au menu principal
            userProfile.CurrentState = "menu";
            
            string completionMessage = "Merci pour tes r√©ponses ! J'ai maintenant une meilleure compr√©hension de tes besoins. ";
            
            if (userProfile.VulnerabilityProfile.Count > 0)
            {
                completionMessage += "J'ai adapt√© nos futures sessions selon ton profil.";
            }
            else
            {
                completionMessage += "Nous allons utiliser un profil standard pour commencer.";
            }
            
            var reply = MessageFactory.Text(completionMessage);
            reply.SuggestedActions = new SuggestedActions
            {
                Actions = new List<CardAction>
                {
                    new CardAction { Title = "üìã Commencer la pr√©paration", Type = ActionTypes.ImBack, Value = "Commencer la pr√©paration" },
                    new CardAction { Title = "üí¨ Simuler un entretien", Type = ActionTypes.ImBack, Value = "Simuler un entretien" },
                    new CardAction { Title = "‚ùì Conseils g√©n√©raux", Type = ActionTypes.ImBack, Value = "Conseils g√©n√©raux" }
                }
            };

            _loggingService.LogStageTransition(userProfile.UserId, "√âvaluation", "Menu Principal");
            
            return reply;
        }

        private async Task AnalyzeUserProfileAsync(UserProfile userProfile)
        {
            if (userProfile.VulnerabilityProfile.Count == 0)
            {
                return; // Pas de donn√©es √† analyser
            }

            try
            {
                // Construire le prompt pour GPT-4o
                string systemPrompt = "Bas√© sur les r√©ponses suivantes √† un questionnaire d'√©valuation des besoins pour la pr√©paration d'entretien, " +
                                "identifie les principales vuln√©rabilit√©s et pr√©f√©rences de cette personne. " +
                                "D√©termine: \n" +
                                "1. Niveau d'exp√©rience en entretien (d√©butant, interm√©diaire, avanc√©)\n" +
                                "2. Niveau d'anxi√©t√© (faible, moyen, √©lev√©)\n" +
                                "3. Besoins d'adaptation sp√©cifiques\n" +
                                "4. Format d'apprentissage pr√©f√©r√©\n" +
                                "5. R√©sume en une phrase le profil de cette personne";

                // Cr√©er les messages
                var messages = new List<MessageDto>();
                string userPrompt = "Voici les r√©ponses au questionnaire d'√©valuation:\n\n";

                foreach (var item in userProfile.VulnerabilityProfile)
                {
                    int questionIndex = int.Parse(item.Key.Replace("Question", ""));
                    if (questionIndex > 0 && questionIndex <= _evaluationQuestions.Count)
                    {
                        userPrompt += $"Question: {_evaluationQuestions[questionIndex - 1]}\n";
                        userPrompt += $"R√©ponse: {item.Value}\n\n";
                    }
                }

                messages.Add(new MessageDto { Role = "user", Content = userPrompt });
                
                // Appeler OpenAI pour analyser le profil
                string analysis = await _openAIService.GetInterviewResponse(messages, systemPrompt);
                
                // Enregistrer l'analyse
                userProfile.VulnerabilityProfile["Analysis"] = analysis;
                
                // Extraire les informations principales pour le profil
                userProfile.ExperienceLevel = ExtractProfileData(analysis, "Niveau d'exp√©rience");
                userProfile.AnxietyLevel = ExtractProfileData(analysis, "Niveau d'anxi√©t√©");
                userProfile.LearningPreference = ExtractProfileData(analysis, "Format d'apprentissage");
                userProfile.SpecificNeeds = ExtractProfileData(analysis, "Besoins d'adaptation");
                userProfile.IsProfileEvaluated = true;
                
                _loggingService.LogUserInteraction(userProfile.UserId, "Analyse du profil", $"Exp√©rience={userProfile.ExperienceLevel}, Anxi√©t√©={userProfile.AnxietyLevel}", "√âvaluation");
            }
            catch (Exception ex)
            {
                _loggingService.LogError(userProfile.UserId, $"Erreur lors de l'analyse du profil: {ex.Message}", ex);
            }
        }

        private string ExtractProfileData(string analysis, string dataType)
        {
            // M√©thode simplifi√©e pour extraire des donn√©es de l'analyse
            if (string.IsNullOrEmpty(analysis)) return "standard";
            
            int index = analysis.IndexOf(dataType, StringComparison.OrdinalIgnoreCase);
            if (index < 0) return "standard";
            
            int lineEnd = analysis.IndexOf('\n', index);
            if (lineEnd < 0) lineEnd = analysis.Length;
            
            string line = analysis.Substring(index, lineEnd - index);
            int colonIndex = line.IndexOf(':');
            
            if (colonIndex < 0) return "standard";
            
            return line.Substring(colonIndex + 1).Trim();
        }
    }
} 